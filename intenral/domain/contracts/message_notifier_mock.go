// Code generated by mockery v2.49.1. DO NOT EDIT.

package contracts

import (
	context "context"
	entities "go-kafka-chat/intenral/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockMessageNotifier is an autogenerated mock type for the MessageNotifier type
type MockMessageNotifier struct {
	mock.Mock
}

// Notify provides a mock function with given fields: ctx, chat, msg
func (_m *MockMessageNotifier) Notify(ctx context.Context, chat *entities.Chat, msg *entities.Message) error {
	ret := _m.Called(ctx, chat, msg)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Chat, *entities.Message) error); ok {
		r0 = rf(ctx, chat, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMessageNotifier creates a new instance of MockMessageNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageNotifier {
	mock := &MockMessageNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
